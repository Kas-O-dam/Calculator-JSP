#                                                                                   $$$$$$$
#	  %%%%%   %%%%%    #######                                                 $$()$$$$$
#	 %%%%%%% %%%%%%%   ###  ###                ##                                 $$$$$$;;;
#	%%%%%%%%%%%%%%%%%  ###  ###           ##   ##                           $$$$$$$$$$$;;;;;;
#	 %%%%%%%%%%%%%%%   ######   ##   ##  ####  ######    ####   #####      $$$$$$$$$$;;;;;;;;;
#	   %%%%%%%%%%%     ##        ## ##    ##   ##   ##  ##  ##  ##   ##     $$$$;;;;;;;;;;;;;
#	      %%%%%        ##         ##      ##   ##   ##  ##  ##  ##   ##      $$$;;;;;;
#	        %          ##        ##        ##  ##   ##   ####   ##   ##         ;;;;;;();;
#										     ;;;;;;;
#Для мотивации, радости и желании работать

# А сейчас я поведаю об алгоритме сией программы
# есть функция analize, в которой сначала объявляются функции get_passive & get_active а потом гоняем по всему примеру циклом и всю инфу заносим в объекты
# цикл в конце анализирует два объекта: prior и proto, prior - объект выражения приоритетного оператора таких как умножить и делить, proto это инфа обо всём выражении в целом
# get_active - функция добывающая активное число, т. е. число НА которое делят, вычитают, суммируют...
# get_passive - добывает пассивное число, 3+2 пассивное 3, активное 2
# сейчас всё работает фигово... но синтаксические ошибки исправлены, интерпретатор не ругается
# 
# 
# 
# 
# 
# поля на будущее...
# 
# 
# 
# 
# 


# Это будущий объект для хранения информации о части с которой работает интерпретатор на данный момент
prior = {
	'en_index': 0,
	'st_index': 0,
	'op_index': 0,
	'active': 0,
	'passive': 0,
	'example': '',
	'operator': ''
}
# Это будущий объект содержащий информацию о первоначальном состоянии примера
proto = {
	'example': '',
	'st_index': 0
}
# По идей тут должен быть инпут, строка присвоена чтоб не парится
input_ex = '697+24309243*3535988-980'
def analize():
	# выставляем все переменные как глобальные
	global prior
	global proto
	global input_ex
	counter=0
	# будущая функция для нахождения индекса приоритетного оператора
	def get_index(operator):
		# Так нужно
		pass
	# фунция для нахождения пассивного числа (числителя)
	def get_passive():
		global prior
		# Содержит в себе пассивное число и будет ретарнино по окончании интерпретации
		string = ''
		range = input_ex[prior['op_index']-2::-1]
		# интерпретатор
		for sym in range: # перебираем символы в подстроке
			# блок-try (трай) служит для ловли ошибок
			try:
				# Если содержимое трай вызывает ошибку... ->
				# пробуем, я посставил это в начало, чтобы переменной пассивного числа не присваивалась всякаяя фигня
				int(sym)
				# print('get_passive()/var:string: ' + sym)
				# теперь присваеваем
				string+=sym
			except:
				# <- ...то выполнится блок-ексепт
				# ретарн пассивного числа
				return string
	# всё тоже самое только для активного числа (знаменателя)
	def get_active():
		string = ''
		range = input_ex[prior['op_index']::]
		print(range)
		for sym in range:
			try:
				int(sym)
				string+=sym
			except:
				return string

	# Вот тут начинается объектная жесть
	for i in input_ex:
		counter+=1
		# делить добавим потом, для начала нужен алгоритм
		if(i=='*'):
			# присваиваем объекту все свойства
			prior['op_index'] = counter
			prior = {
				# Это нужно на будущее
				'en_index': None,
				'st_index': None,
				# активное число
				'active': int(get_active()),
				# пассивное число
				'passive': int(get_passive()),
				'example': input_ex[prior['st_index']:prior['en_index']],
				# Да, это тоже важно
				'operator': '*'
			}

			proto = {
				# Это всё тоже на будущее
				'example': input_ex,
				'st_index': 0
			}
	#print('object:prior: ')
	#print(prior)
	#print('object:proto: ')
	#print(proto)
# Всё будет оформлено в виде модуля, так что обернуть функцию и вызвать её - это обязательно
analize()
